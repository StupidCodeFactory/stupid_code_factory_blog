version: 2
jobs:
  deploy:
    working_directory: ~/stupid_code_factory_blog
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run: echo 'export PATH=$PATH:~/.local/bin' >> $BASH_ENV
      # - restore_cache:
      #     key: pip-{{ checksum "requirements.txt" }}
      - run:
          name: install jq-1.5
          command: |
            wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
            chmod +x jq-linux64
            sudo mv jq-linux64 /usr/local/bin/jq

      - run: pip install --upgrade --user -r requirements.txt
      - run:
          name: configure aws
          command:
            aws configure set default.region eu-west-2
      - save_cache:
          key: pip-{{ checksum "requirements.txt" }}
          paths:
            - ~/.local
      - setup_remote_docker:
          reusable: true
      - run:
          name: Push application Docker image
          command: |
            export PATH="$PATH:~/.local/bin"
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              $(aws ecr get-login --no-include-email --region eu-west-2)
              docker build -t "stupid-code-factory-blog:${CIRCLE_BUILD_NUM}" .
              docker build -t "stupid-code-factory-nginx:${CIRCLE_BUILD_NUM}" -f Dockerfile.nginx .
              docker tag  "stupid-code-factory-blog:${CIRCLE_BUILD_NUM}" "${ECR_ENDPOINT}/stupid-code-factory-blog:${CIRCLE_BUILD_NUM}"
              docker tag  "stupid-code-factory-nginx:${CIRCLE_SHA1}" "${ECR_ENDPOINT}/stupid-code-factory-nginx:${CIRCLE_BUILD_NUM}"
              docker push "${ECR_ENDPOINT}/stupid-code-factory-blog:${CIRCLE_BUILD_NUM}"
              docker push "${ECR_ENDPOINT}/stupid-code-factory-nginx:${CIRCLE_BUILD_NUM}"
            fi
      - deploy:
          name: deploy
          command: |
            set -eo pipefail

            CLUSTER=stupid-code-factory-blog
            SERVICE_NAME=web
            ECR_ENDPOINT=466565482925.dkr.ecr.eu-west-2.amazonaws.com
            DESIRED_COUNT=1
            get_task_definition() {
              service=$1
              aws ecs describe-services --cluster $CLUSTER --services $SERVICE_NAME
            }

            get_task_definition_arn() {
              get_task_definition $1 | jq -r '.services[0].taskDefinition'
            }

            task_definition_arn=$(get_task_definition_arn "web")
            task_definition_name=${task_definition_arn##*/}
            task_definition=$(aws ecs describe-task-definition --task-definition $task_definition_name)
            rails_container_definition=$(echo $task_definition | jq --arg name rails '.taskDefinition.containerDefinitions | map(select(.name == $name))[0]')
            nginx_container_definition=$(echo $task_definition | jq --arg name nginx '.taskDefinition.containerDefinitions | map(select(.name == $name))[0]')

            rails_container_definition=$(echo $rails_container_definition | jq --arg image "${ECR_ENDPOINT}/${CLUSTER}:${CIRCLE_BUILD_NUM}" '.image = $image')


            current_revision=$(echo $task_definition | jq -r '.taskDefinition.revision')
            task_family=$(echo $task_definition | jq -r '.taskDefinition.family')

            cat config/web-task-definition.json | jq --argjson rails "${rails_container_definition}" --argjson nginx "${nginx_container_definition}"  ".containerDefinitions[0]= \$rails | .containerDefinitions[1]= \$nginx" > tmp/deploy.json
            task_revision=$(aws ecs register-task-definition --cli-input-json file://tmp/deploy.json | jq '.taskDefinition.revision')

            aws ecs update-service \
                --cluster ${CLUSTER} \
                --service ${SERVICE_NAME} \
                --task-definition ${task_family}:${task_revision} \
                --desired-count 1

  build:
    working_directory: ~/stupid_code_factory_blog
    docker:
      - image: circleci/ruby:2.4.2-node
        environment:
          RAILS_ENV: test
      - image: circleci/postgres:alpine
      - image: elasticsearch
    steps:
      - checkout
      # Restore bundle cache
      - restore_cache:
          key: rails-{{ checksum "Gemfile.lock" }}



      # Bundle install dependencies
      - run: bundle install --path vendor/bundle
      # Store bundle cache
      - save_cache:
          key: rails-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Database setup
      - run:
          name: Set up db
          command: |
            bundle exec rake db:create db:schema:load --trace
            bundle exec rake db:migrate

      # Run rspec in parallel
      - type: shell
        command: |
          bundle exec rspec --profile 10 \
                            --format RspecJunitFormatter \
                            --out test_results/rspec.xml \
                            --format progress \
                            $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      # Save test results for timing analysis
      - store_test_results:
          path: test_results


workflows:
  version: 2
  build-and-deploy:
    jobs:
      - deploy
